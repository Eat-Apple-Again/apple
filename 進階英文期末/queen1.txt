//質因數
#include <iostream>  
#include <math.h>  
using namespace std;  
  
void find(int);  
  
int main(void)  
{  
    int data;  
  
        cin >> data;  
        find(data);  
        cout << endl;  
      
    return 0;  
}  
  
void find(int data)  
{  
    for (int i = 2, count = 0; data != 1; i++)//if data equal to 1,break out  
    {  
        int j = 1;  
        if (data % i == 0)//data can be divided by i  
        {  
            for (j = 1; (data % i) == 0; j++)  
            {  
                data /= i;  
            }  
            j--;  
            //////////////////////////////////////////////////////output  
            if (count != 0)  
            {  
                if (j != 1)  
                    cout << " * " << i << "^" << j;  
                else if (j == 1)  
                    cout << " * " << i;  
            }  
            else  
            {  
                if (j != 1)  
                    cout << i << "^" << j;  
                else if (j == 1)  
                    cout << i;  
                count++;  
            }  
            //////////////////////////////////////////////////////////  
        }  
        else  
            continue;  
    }  
}

///////////////////////////////////////////////二元搜尋樹插入節點
#include <iostream>  
using namespace std;  
  
struct node {  
    int num;  
    node *lnode;  
    node *rnode;  
};  
  
void printFun(int a)  
{  
    cout << a << " ";  
}  
  
void preOrder(node *ptr)  
{  
    if (ptr != NULL)  
    {  
        printFun(ptr->num);  
        preOrder(ptr->lnode);  
        preOrder(ptr->rnode);  
    }  
}  
  
void insert(int obj, node *ptr, node *root)  
{  
    node *newNode = new node;  
      
    newNode->num = 0;  
    newNode->lnode = NULL;  
    newNode->rnode = NULL;  
  
    ptr = root;  
  
    while (1)  
    {  
        if ((ptr->num) == obj)  
        {  
            cout << "Already have" << endl;  
            break;  
        }  
        else if (((ptr->num) > obj) && ((ptr->lnode) != NULL))  
        {  
            ptr = ptr->lnode;  
        }  
        else if (((ptr->num) > obj) && ((ptr->lnode) == NULL))  
        {  
            ptr->lnode = newNode;  
            newNode->num = obj;  
            break;  
        }  
        else if (((ptr->num) < obj) && ((ptr->rnode) != NULL))  
        {  
            ptr = ptr->rnode;  
        }  
        else if (((ptr->num) < obj) && ((ptr->rnode) == NULL))  
        {  
            ptr->rnode = newNode;  
            newNode->num = obj;  
            break;  
        }  
    }  
}  
  
int main(void)  
{  
    int input_num;  
    char space;  
    node *root = new node;  
    node *ptr = NULL;  
  
    cin >> input_num;  
    cout << input_num << " " << endl;  
  
    root->num = input_num;  
    root->lnode = NULL;  
    root->rnode = NULL;  
  
    while (cin >> input_num)  
    {  
        insert(input_num, ptr, root);  
        preOrder(root);  
        cout << endl;  
    }  
    return 0; 
}

////////////////////////////////DFS BFS
#include<stdio.h>    
#include<stdlib.h>    
#define False 0    
#define True 1    
typedef struct list* listptr;    
struct list    
{    
    int data;    
    listptr next;    
};    
listptr AdjacencyList[100];    
short int visited[100];    
void dfs(int v)    
{    
    static int count=0;    
    listptr w;    
    visited[v] = True;    
    if(count!=0)    
        printf(" ");    
    count++;    
    printf("%d",v);    
    for(w=AdjacencyList[v];w;w=w->next)    
        if(!visited[w->data])    
            dfs(w->data);    
}    
int queue[100];    
int last=0;    
void bfs(int v)    
{    
    listptr w;    
    int i;    
    printf("%d", v);    
    visited[v] = True;    
    queue[last++] = v;    
    while(last != 0)    
    {    
        v = queue[0];    
        for(i=0;i<last-1;i++)    
            queue[i] = queue[i+1];    
        last--;    
        for(w=AdjacencyList[v];w;w=w->next)    
        if(!visited[w->data])    
        {    
            printf(" %d", w->data);    
            queue[last++] = w->data;    
            visited[w->data] = True;    
        }    
    }    
}    
void InsertToList(listptr p, int num)    
{    
    while(p->next)    
        p = p->next;     
    listptr add = (listptr)malloc(sizeof(*add));    
    add->data = num;    
    add->next = NULL;    
    p->next = add;    
}    
void print_AdjacencyList(listptr p, int i)    
{    
    printf("%d: ", i);    
    while(p)    
    {    
        printf("%d -> ", p->data);    
        p = p->next;    
    }    
    printf("end\n");    
}    
int main()    
{    
    int a, b, max=0;    
    int i, j;       
    for(i=0;i<100;i++)    
        AdjacencyList[i] = NULL;    
    while(scanf("%d\t%d", &a, &b)!=EOF)    
    {    
        if(a>max)    
            max = a;    
        if(b>max)    
            max = b;        
        for(i=0;i<=max;i++)    
            if(AdjacencyList[i] == NULL)    
            {    
                AdjacencyList[i] = (listptr)malloc(sizeof(*AdjacencyList[i]));    
                AdjacencyList[i]->data = i;    
                AdjacencyList[i]->next = NULL;    
            }       
        InsertToList(AdjacencyList[a], b);    
        InsertToList(AdjacencyList[b], a);    
        /*printf("Adjacency list:\n");  
        for(i=0;i<=max;i++)  
            print_AdjacencyList(AdjacencyList[i], i);*/    
    }    
    for(i=0;i<=max;i++)    
        AdjacencyList[i] = AdjacencyList[i]->next;    
    printf("Depth First Search:\n");    
    for(i=0;i<100;i++)    
        visited[i] = False;    
    dfs(0);    
    printf("\n\n");    
    printf("Breadth First Search:\n");    
    for(i=0;i<100;i++)    
        visited[i] = False;    
    bfs(0);    
    printf("\n");    
}

////////////////////////////////////////disk^k[u]
#include<iostream>
#include <algorithm>
#define INT_MAX 10000
#define max 10
using namespace std;

int matrix[max][max]={0},dist[max][max]={0};

void printdist(int n){
    for(int k=0;k<n-1;k++){
        for(int i=0;i<n;i++){
            if(i==n-1&&dist[k][i]==INT_MAX) cout<<'i'<<endl;
            else if(i==n-1) cout<<dist[k][i]<<endl;
            else if(dist[k][i]==INT_MAX) cout<<'i'<<" ";
            else cout<<dist[k][i]<<" ";
        }
    }
}
void distk(int v,int n){
    for(int i=0;i<=n;i++) dist[0][i]=matrix[v][i];
    dist[0][v]=0;
    for(int k=1;k<n-1;k++){
        for(int i=0;i<n;i++){
            int temp1 = dist[k-1][i];
            int temp2=100000;
            for(int x=0;x<n;x++){
                if(x==v) continue;
                if(dist[k-1][x]+matrix[x][i]<temp2) temp2 = dist[k-1][x]+matrix[x][i];
            }
            dist[k][i] = min(temp1,temp2);
        }
    }
}
int main(){
    int a=0,b=0,c=0,n=0;
    for(int i=0;i<max;i++){
        for(int j=0;j<max;j++) matrix[i][j] = INT_MAX;
    }
    while(cin>>a>>b>>c){
        if(a>n) n=a;
        if(b>n) n=b;
        matrix[a][b]=c;
    }
    n+=1;
    distk(0,n);
    printdist(n);
}
